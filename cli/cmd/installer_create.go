package cmd

import (
	"fmt"
	"io/ioutil"
	"strings"
	"time"

	"github.com/pkg/errors"
	"github.com/replicatedhq/replicated/cli/print"
	"github.com/spf13/cobra"
)

func (r *runners) InitInstallerCreate(parent *cobra.Command) {
	cmd := &cobra.Command{
		Use:          "create",
		Short:        "Create a new installer spec",
		Long:         `Create a new installer spec by providing YAML configuration for a https://kurl.sh cluster.`,
		SilenceUsage: true,
	}

	parent.AddCommand(cmd)

	cmd.Flags().StringVar(&r.args.createInstallerYaml, "yaml", "", "The YAML config for this installer. Use '-' to read from stdin. Cannot be used with the --yaml-file flag.")
	cmd.Flags().StringVar(&r.args.createInstallerYamlFile, "yaml-file", "", "The file name with YAML config for this installer. Cannot be used with the --yaml flag.")
	cmd.Flags().StringVar(&r.args.createInstallerPromote, "promote", "", "Channel name or id to promote this installer to")
	cmd.Flags().BoolVar(&r.args.createInstallerPromoteEnsureChannel, "ensure-channel", false, "When used with --promote <channel>, will create the channel if it doesn't exist")
	cmd.Flags().BoolVar(&r.args.createInstallerAutoDefaults, "auto", false, "generate default values for use in CI")
	cmd.Flags().BoolVarP(&r.args.createInstallerAutoDefaultsAccept, "confirm-auto", "y", false, "auto-accept the configuration generated by the --auto flag")

	cmd.RunE = r.installerCreate
}

func (r *runners) setKOTSDefaultInstallerParams() error {
	if r.args.createInstallerYamlFile == "" {
		r.args.createInstallerYamlFile = "./kurl-installer.yaml"
	}

	_, branch, _, err := r.gitSHABranch()
	if err != nil {
		return errors.Wrapf(err, "get git properties")
	}

	if r.args.createInstallerPromote == "" {
		r.args.createInstallerPromote = branch
		if branch == "master" || branch == "main" {
			r.args.createInstallerPromote = "Unstable"
		}
	}

	r.args.createInstallerPromoteEnsureChannel = true

	return nil
}

func (r *runners) installerCreate(_ *cobra.Command, _ []string) error {
	if r.appType != "kots" {
		return errors.Errorf("Installer specs are only supported for KOTS applications, app %q has type %q", r.appID, r.appType)
	}

	log := print.NewLogger(r.w)
	if r.args.createInstallerAutoDefaults {
		log.ActionWithSpinner("Reading Environment")
		err := r.setKOTSDefaultInstallerParams()
		if err != nil {
			log.FinishSpinnerWithError()
			return errors.Wrap(err, "resolve kots defaults")
		}
		time.Sleep(500 * time.Millisecond)
		log.FinishSpinner()

		fmt.Fprintf(r.w, `
Prepared to create release with defaults:

    yaml-file       %q
    promote         %q
    ensure-channel  %t

`, r.args.createInstallerYamlFile, r.args.createInstallerPromote, r.args.createInstallerPromoteEnsureChannel)
		if !r.args.createInstallerAutoDefaultsAccept {
			confirmed, err := promptForConfirm()
			if err != nil {
				return err
			}
			if confirmed != "y" {
				return errors.New("configuration declined")
			}
			fmt.Printf("You can use the --confirm-auto or -y flag in the future to skip this prompt.\n")
		}
	}

	if r.args.createInstallerYaml == "" &&
		r.args.createInstallerYamlFile == "" {
		return errors.New("one of --yaml or --yaml-file is required")
	}

	if r.args.createInstallerYaml != "" && r.args.createInstallerYamlFile != "" {
		return errors.New("only one of --yaml or --yaml-file may be specified")
	}

	if (strings.HasSuffix(r.args.createInstallerYaml, ".yaml") || strings.HasSuffix(r.args.createInstallerYaml, ".yml")) &&
		len(strings.Split(r.args.createInstallerYaml, " ")) == 1 {
		return errors.New("use the --yaml-file flag when passing a yaml filename")
	}

	// can't ensure a channel if you didn't pass one
	if r.args.createInstallerPromoteEnsureChannel && r.args.createInstallerPromote == "" {
		return errors.New("cannot use the flag --ensure-channel without also using --promote <channel> ")
	}

	if r.args.createInstallerYaml == "-" {
		bytes, err := ioutil.ReadAll(r.stdin)
		if err != nil {
			return errors.Wrap(err, "read from stdin")
		}
		r.args.createInstallerYaml = string(bytes)
	}

	if r.args.createInstallerYamlFile != "" {
		bytes, err := ioutil.ReadFile(r.args.createInstallerYamlFile)
		if err != nil {
			return errors.Wrap(err, "read file yaml")
		}
		r.args.createInstallerYaml = string(bytes)
	}

	// if the --promote param was used make sure it identifies exactly one
	// channel before proceeding
	var promoteChanID string
	if r.args.createInstallerPromote != "" {
		var err error
		promoteChanID, err = r.getOrCreateChannelForPromotion(
			r.args.createInstallerPromote,
			r.args.createInstallerPromoteEnsureChannel,
		)
		if err != nil {
			return errors.Wrapf(err, "get or create channel %q for promotion", promoteChanID)
		}
	}
	log.ActionWithSpinner("Creating Installer")
	installerSpec, err := r.api.CreateInstaller(r.appID, r.appType, r.args.createInstallerYaml)
	if err != nil {
		log.FinishSpinnerWithError()
		return err
	}
	log.FinishSpinner()

	log.ChildActionWithoutSpinner("SEQUENCE: %d", installerSpec.Sequence)

	// don't send a version label as its not really meaningful
	noVersionLabel := ""

	if promoteChanID != "" {
		log.ActionWithSpinner("Promoting")
		if err := r.api.PromoteInstaller(
			r.appID,
			r.appType,
			installerSpec.Sequence,
			promoteChanID,
			noVersionLabel,
		); err != nil {
			log.FinishSpinnerWithError()
			return errors.Wrap(err, "promote installer")
		}
		log.FinishSpinner()

		// ignore error since operation was successful
		log.ChildActionWithoutSpinner("Channel %s successfully set to installer %d\n", promoteChanID, installerSpec.Sequence)
	}

	return nil
}
